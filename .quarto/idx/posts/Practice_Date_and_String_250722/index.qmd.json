{"title":"Practice_Date_and_String_250722","markdown":{"yaml":{"title":"Practice_Date_and_String_250722","author":"Seong Yoolim","date":"2025-07-22","categories":["code","study"]},"headingText":"날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록","containsRefs":false,"markdown":"\n\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\n# 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록\ndf = pd.read_csv('bike_data.csv')\ndf.head()\ndf.info()\n# 데이터 속성 변환\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\ndf.head()\ndf.info()\n\n```\n\n1.  계절(season) == 1일 때, 가장 대여량이 많은 시간대(hour)을 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf_season1 = df[df['season'] == 1]\ndf_season1['hour'] = df['datetime'].dt.hour\ndf_season1\n#df_season1_max = df_season1.groupby('hour')['count'].mean()\n#max_count = df_season1_max.max()\n#max_hour = df_season1_max.idxmax()\n#max(df[df['season'] == 1]['count'])\nmax_count = df_season1.loc[df_season1['count'].idxmax()]['count']\nmax_count\nmax_time = df_season1.loc[df_season1['count'].idxmax()]['datetime']\nmax_hour= max_time.hour\nmax_hour\nprint(\"count가 가장 큰 hour는\", max_hour, \"이며, 대여량은\", max_count, \"입니다.\")\n\n```\n\n2.  각 계절(season)별 평균 대여량(count)을 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf.groupby('season')['count'].mean()\n\n```\n\n3.  특정 달(month) 동안의 총 대여량(count)을 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['month'] = df['datetime'].dt.month\ndf.groupby('month')['count'].sum()\n\n```\n\n4.  가장 대여량이 많은 날짜를 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['date'] = df['datetime'].dt.date\n\ndf_max_count = df.groupby('date')['count'].sum()\ndf_max_count\ndf_max_count.max()\ndf_max_count.idxmax()\nprint(\"가장 대여량이 많은 날짜는\", df_max_count.idxmax(), \"이며, 대여량은\", df_max_count.max(), \"입니다.\")\n\n```\n\n5.  시간대(hour)별 평균 대여량(count)을 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['hour'] = df['datetime'].dt.hour\ndf_hour_avg = df.groupby('hour')['count'].mean()\nhour = df['datetime'].dt.hour\n# 외부 배열이라도 길이가 같으면 groupby 가능\nhour = df['datetime'].dt.hour\ntype(hour)\ndf_hour_avg = df.groupby(hour)['count'].mean()\ndf_hour_avg\n\n```\n\n6.  특정 요일(weekday) 동안의 총 대여량(count)을 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['weekday'] = df['datetime'].dt.day_name() # weekday 쓰면 숫자로 나옴\ndf\ndf_grouped = df.groupby('weekday')['count'].sum()\ndf_grouped = pd.DataFrame(df_grouped)\ndf_grouped = df_grouped.reset_index()\ndf_grouped\nweekday = df_grouped.iloc[:,0]\nweekday\ncount_weekday = df_grouped.iloc[:,1]\ncount_weekday\nfor i in range(0, 7):\n    print(f\"{weekday[i]} 동안의 총 대여량은 {count_weekday[i]} 입니다.\")\n    \n```\n\n7.   주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 긴 형식(long format)으로 변환하시오. casual과 registered 열을 하나의 열로 변환하고, 각 기록의 대여 유형과 대여 수를 포함하는 긴 형식 데이터프레임을 만드시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf_long = df.melt(value_vars=['casual', 'registered'],\n        id_vars=['datetime','season'],\n        var_name='대여 유형',\n        value_name='대여 수'\n        )\ndf_long\n\n```\n\n8.  이전에 생성한 긴 형식 데이터프레임을 활용하여 각 계절(season)별로 casual과 registered 사용자의 평균 대여 수(count)를 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf_long_pivot = df_long.pivot_table(\n    index=\"season\",\n    values='대여 수',\n    columns='대여 유형',\n    aggfunc='mean'\n).reset_index()\ndf_long_pivot\ndf_pivot = df_long_pivot.melt(\n    value_vars=['casual', 'registered'],\n    var_name='user_type',\n    value_name='user_count',\n    id_vars='season'\n)\ndf_pivot.sort_values('season')\n# groupby\n# df8.groupby(['season','user_type'])['user_count'].mean().reset_index()\n\n```\n\n# 앱 로그 데이터\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\n\n# 앱 로그 데이터\npd.set_option('display.max_columns', None) # 전체 칼럼 정보 프린트 옵션\ndf = pd.read_csv('logdata.csv')\ndf\n\n```\n\n9.  로그 칼럼에서 숫자 정보만 추출하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\n# df['로그'].str.extract(r'([\\d+\\W+]+[\\d+\\W+]+[\\d+])', expand=True)\ndf['로그'].str.extract(r'(\\d{4})-(\\d{2})-(\\d{2})\\s+(\\d{2}):(\\d{2}):(\\d{2}).*?(\\d+)', expand=True)\ndf_num = df['로그'].str.extractall(r'(\\d+)')\n# chat gpt\ndf_num = df_num.groupby(level=0).agg(list)\ndf_num\ndf_num[0].apply(pd.Series)\n\n#'(\\d{4})-(\\d{2})-(\\d{2})\\s+(\\d{2}):(\\d{2}):(\\d{2}).*?(\\d+)'\n\n```\n\n10. 로그 칼럼에서 모든 시간 정보를 추출하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['로그'].str.extract(r'([\\d+\\W+]+\\d+\\W+)', expand=True)\n\n```\n\n11. 로그 칼럼에서 한글 정보만 추출하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['로그'].str.extract(r'([가-힣]+)', expand=True)\n\n```\n\n12. 로그 칼럼에서 특수 문자를 제거하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['로그'].str.extractall(r'([^a-zA-Z0-9가-힣\\s])')\ndf['로그'].str.replace(r'[^a-zA-Z0-9가-힣\\s]', ' ', regex=True)\n\n```\n\n13. 로그 칼럼에서 유저, Amount 값을 추출한 후 각 유저별 Amount의 평균값을 계산하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf_log = pd.DataFrame()\ndf_log\ndf_log['유저'] = df['로그'].str.extract(r'([가-힣]+)', expand=True)\ndf_log['amount'] = df['로그'].str.extract(r'Amount:\\s(\\d+)',expand=True)\ndf_log = df_log.dropna()\ndf_log['amount'] = df_log['amount'].astype('Int64')\ndf_log.groupby('유저')['amount'].mean()\n\n```","srcMarkdownNoYaml":"\n\n# 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\n# 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록\ndf = pd.read_csv('bike_data.csv')\ndf.head()\ndf.info()\n# 데이터 속성 변환\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\ndf.head()\ndf.info()\n\n```\n\n1.  계절(season) == 1일 때, 가장 대여량이 많은 시간대(hour)을 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf_season1 = df[df['season'] == 1]\ndf_season1['hour'] = df['datetime'].dt.hour\ndf_season1\n#df_season1_max = df_season1.groupby('hour')['count'].mean()\n#max_count = df_season1_max.max()\n#max_hour = df_season1_max.idxmax()\n#max(df[df['season'] == 1]['count'])\nmax_count = df_season1.loc[df_season1['count'].idxmax()]['count']\nmax_count\nmax_time = df_season1.loc[df_season1['count'].idxmax()]['datetime']\nmax_hour= max_time.hour\nmax_hour\nprint(\"count가 가장 큰 hour는\", max_hour, \"이며, 대여량은\", max_count, \"입니다.\")\n\n```\n\n2.  각 계절(season)별 평균 대여량(count)을 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf.groupby('season')['count'].mean()\n\n```\n\n3.  특정 달(month) 동안의 총 대여량(count)을 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['month'] = df['datetime'].dt.month\ndf.groupby('month')['count'].sum()\n\n```\n\n4.  가장 대여량이 많은 날짜를 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['date'] = df['datetime'].dt.date\n\ndf_max_count = df.groupby('date')['count'].sum()\ndf_max_count\ndf_max_count.max()\ndf_max_count.idxmax()\nprint(\"가장 대여량이 많은 날짜는\", df_max_count.idxmax(), \"이며, 대여량은\", df_max_count.max(), \"입니다.\")\n\n```\n\n5.  시간대(hour)별 평균 대여량(count)을 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['hour'] = df['datetime'].dt.hour\ndf_hour_avg = df.groupby('hour')['count'].mean()\nhour = df['datetime'].dt.hour\n# 외부 배열이라도 길이가 같으면 groupby 가능\nhour = df['datetime'].dt.hour\ntype(hour)\ndf_hour_avg = df.groupby(hour)['count'].mean()\ndf_hour_avg\n\n```\n\n6.  특정 요일(weekday) 동안의 총 대여량(count)을 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['weekday'] = df['datetime'].dt.day_name() # weekday 쓰면 숫자로 나옴\ndf\ndf_grouped = df.groupby('weekday')['count'].sum()\ndf_grouped = pd.DataFrame(df_grouped)\ndf_grouped = df_grouped.reset_index()\ndf_grouped\nweekday = df_grouped.iloc[:,0]\nweekday\ncount_weekday = df_grouped.iloc[:,1]\ncount_weekday\nfor i in range(0, 7):\n    print(f\"{weekday[i]} 동안의 총 대여량은 {count_weekday[i]} 입니다.\")\n    \n```\n\n7.   주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 긴 형식(long format)으로 변환하시오. casual과 registered 열을 하나의 열로 변환하고, 각 기록의 대여 유형과 대여 수를 포함하는 긴 형식 데이터프레임을 만드시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf_long = df.melt(value_vars=['casual', 'registered'],\n        id_vars=['datetime','season'],\n        var_name='대여 유형',\n        value_name='대여 수'\n        )\ndf_long\n\n```\n\n8.  이전에 생성한 긴 형식 데이터프레임을 활용하여 각 계절(season)별로 casual과 registered 사용자의 평균 대여 수(count)를 구하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf_long_pivot = df_long.pivot_table(\n    index=\"season\",\n    values='대여 수',\n    columns='대여 유형',\n    aggfunc='mean'\n).reset_index()\ndf_long_pivot\ndf_pivot = df_long_pivot.melt(\n    value_vars=['casual', 'registered'],\n    var_name='user_type',\n    value_name='user_count',\n    id_vars='season'\n)\ndf_pivot.sort_values('season')\n# groupby\n# df8.groupby(['season','user_type'])['user_count'].mean().reset_index()\n\n```\n\n# 앱 로그 데이터\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\n\n# 앱 로그 데이터\npd.set_option('display.max_columns', None) # 전체 칼럼 정보 프린트 옵션\ndf = pd.read_csv('logdata.csv')\ndf\n\n```\n\n9.  로그 칼럼에서 숫자 정보만 추출하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\n# df['로그'].str.extract(r'([\\d+\\W+]+[\\d+\\W+]+[\\d+])', expand=True)\ndf['로그'].str.extract(r'(\\d{4})-(\\d{2})-(\\d{2})\\s+(\\d{2}):(\\d{2}):(\\d{2}).*?(\\d+)', expand=True)\ndf_num = df['로그'].str.extractall(r'(\\d+)')\n# chat gpt\ndf_num = df_num.groupby(level=0).agg(list)\ndf_num\ndf_num[0].apply(pd.Series)\n\n#'(\\d{4})-(\\d{2})-(\\d{2})\\s+(\\d{2}):(\\d{2}):(\\d{2}).*?(\\d+)'\n\n```\n\n10. 로그 칼럼에서 모든 시간 정보를 추출하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['로그'].str.extract(r'([\\d+\\W+]+\\d+\\W+)', expand=True)\n\n```\n\n11. 로그 칼럼에서 한글 정보만 추출하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['로그'].str.extract(r'([가-힣]+)', expand=True)\n\n```\n\n12. 로그 칼럼에서 특수 문자를 제거하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf['로그'].str.extractall(r'([^a-zA-Z0-9가-힣\\s])')\ndf['로그'].str.replace(r'[^a-zA-Z0-9가-힣\\s]', ' ', regex=True)\n\n```\n\n13. 로그 칼럼에서 유저, Amount 값을 추출한 후 각 유저별 Amount의 평균값을 계산하시오.\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\ndf_log = pd.DataFrame()\ndf_log\ndf_log['유저'] = df['로그'].str.extract(r'([가-힣]+)', expand=True)\ndf_log['amount'] = df['로그'].str.extract(r'Amount:\\s(\\d+)',expand=True)\ndf_log = df_log.dropna()\ndf_log['amount'] = df_log['amount'].astype('Int64')\ndf_log.groupby('유저')['amount'].mean()\n\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":["flatly"],"title-block-banner":true,"title":"Practice_Date_and_String_250722","author":"Seong Yoolim","date":"2025-07-22","categories":["code","study"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}