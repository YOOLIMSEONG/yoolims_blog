---
title: ""
listing:
  contents: posts
  sort: "date desc"
  type: default
  categories: true
  sort-ui: true
  filter-ui: true
page-layout: full
title-block-banner: true
---

# 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록

```{python}
import numpy as np
import pandas as pd

# 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록
df = pd.read_csv('./data/bike_data.csv')
df.head()
df.info()
# 데이터 속성 변환
df = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', 
                'season' : 'object', 'workingday' : 'object', 
                'holiday' : 'object'})
df.head()
df.info()

```

1.  계절(season) == 1일 때, 가장 대여량이 많은 시간대(hour)을 구하시오.

```{python}
import numpy as np
import pandas as pd

df_season1 = df[df['season'] == 1]
df_season1['hour'] = df['datetime'].dt.hour
df_season1
#df_season1_max = df_season1.groupby('hour')['count'].mean()
#max_count = df_season1_max.max()
#max_hour = df_season1_max.idxmax()
#max(df[df['season'] == 1]['count'])
max_count = df_season1.loc[df_season1['count'].idxmax()]['count']
max_count
max_time = df_season1.loc[df_season1['count'].idxmax()]['datetime']
max_hour= max_time.hour
max_hour
print("count가 가장 큰 hour는", max_hour, "이며, 대여량은", max_count, "입니다.")

```

2.  각 계절(season)별 평균 대여량(count)을 구하시오.

```{python}
import numpy as np
import pandas as pd

df.groupby('season')['count'].mean()

```

3.  특정 달(month) 동안의 총 대여량(count)을 구하시오.

```{python}
import numpy as np
import pandas as pd

df['month'] = df['datetime'].dt.month
df.groupby('month')['count'].sum()

```

4.  가장 대여량이 많은 날짜를 구하시오.

```{python}
import numpy as np
import pandas as pd

df['date'] = df['datetime'].dt.date

df_max_count = df.groupby('date')['count'].sum()
df_max_count
df_max_count.max()
df_max_count.idxmax()
print("가장 대여량이 많은 날짜는", df_max_count.idxmax(), "이며, 대여량은", df_max_count.max(), "입니다.")

```

5.  시간대(hour)별 평균 대여량(count)을 구하시오.

```{python}
import numpy as np
import pandas as pd

df['hour'] = df['datetime'].dt.hour
df_hour_avg = df.groupby('hour')['count'].mean()
hour = df['datetime'].dt.hour
# 외부 배열이라도 길이가 같으면 groupby 가능
hour = df['datetime'].dt.hour
type(hour)
df_hour_avg = df.groupby(hour)['count'].mean()
df_hour_avg

```

6.  특정 요일(weekday) 동안의 총 대여량(count)을 구하시오.

```{python}
import numpy as np
import pandas as pd

df['weekday'] = df['datetime'].dt.day_name() # weekday 쓰면 숫자로 나옴
df
df_grouped = df.groupby('weekday')['count'].sum()
df_grouped = pd.DataFrame(df_grouped)
df_grouped = df_grouped.reset_index()
df_grouped
weekday = df_grouped.iloc[:,0]
weekday
count_weekday = df_grouped.iloc[:,1]
count_weekday
for i in range(0, 7):
    print(f"{weekday[i]} 동안의 총 대여량은 {count_weekday[i]} 입니다.")
    
```

7.   주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 긴 형식(long format)으로 변환하시오. casual과 registered 열을 하나의 열로 변환하고, 각 기록의 대여 유형과 대여 수를 포함하는 긴 형식 데이터프레임을 만드시오.

```{python}
import numpy as np
import pandas as pd

df_long = df.melt(value_vars=['casual', 'registered'],
        id_vars=['datetime','season'],
        var_name='대여 유형',
        value_name='대여 수'
        )
df_long

```

8.  이전에 생성한 긴 형식 데이터프레임을 활용하여 각 계절(season)별로 casual과 registered 사용자의 평균 대여 수(count)를 구하시오.

```{python}
import numpy as np
import pandas as pd

df_long_pivot = df_long.pivot_table(
    index="season",
    values='대여 수',
    columns='대여 유형',
    aggfunc='mean'
).reset_index()
df_long_pivot
df_pivot = df_long_pivot.melt(
    value_vars=['casual', 'registered'],
    var_name='user_type',
    value_name='user_count',
    id_vars='season'
)
df_pivot.sort_values('season')
# groupby
# df8.groupby(['season','user_type'])['user_count'].mean().reset_index()

```

# 앱 로그 데이터

```{python}
import numpy as np
import pandas as pd


# 앱 로그 데이터
pd.set_option('display.max_columns', None) # 전체 칼럼 정보 프린트 옵션
df = pd.read_csv('./data/logdata.csv')
df

```

9.  로그 칼럼에서 숫자 정보만 추출하시오.

```{python}
import numpy as np
import pandas as pd

# df['로그'].str.extract(r'([\d+\W+]+[\d+\W+]+[\d+])', expand=True)
df['로그'].str.extract(r'(\d{4})-(\d{2})-(\d{2})\s+(\d{2}):(\d{2}):(\d{2}).*?(\d+)', expand=True)
df_num = df['로그'].str.extractall(r'(\d+)')
# chat gpt
df_num = df_num.groupby(level=0).agg(list)
df_num
df_num[0].apply(pd.Series)

#'(\d{4})-(\d{2})-(\d{2})\s+(\d{2}):(\d{2}):(\d{2}).*?(\d+)'

```

10. 로그 칼럼에서 모든 시간 정보를 추출하시오.

```{python}
import numpy as np
import pandas as pd

df['로그'].str.extract(r'([\d+\W+]+\d+\W+)', expand=True)

```

11. 로그 칼럼에서 한글 정보만 추출하시오.

```{python}
import numpy as np
import pandas as pd

df['로그'].str.extract(r'([가-힣]+)', expand=True)

```

12. 로그 칼럼에서 특수 문자를 제거하시오.

```{python}
import numpy as np
import pandas as pd

df['로그'].str.extractall(r'([^a-zA-Z0-9가-힣\s])')
df['로그'].str.replace(r'[^a-zA-Z0-9가-힣\s]', ' ', regex=True)

```

13. 로그 칼럼에서 유저, Amount 값을 추출한 후 각 유저별 Amount의 평균값을 계산하시오.

```{python}
import numpy as np
import pandas as pd

df_log = pd.DataFrame()
df_log
df_log['유저'] = df['로그'].str.extract(r'([가-힣]+)', expand=True)
df_log['amount'] = df['로그'].str.extract(r'Amount:\s(\d+)',expand=True)
df_log = df_log.dropna()
df_log['amount'] = df_log['amount'].astype('Int64')
df_log.groupby('유저')['amount'].mean()

```